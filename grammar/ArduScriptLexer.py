# Generated from ArduScript.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,46,303,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
        1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,5,28,231,
        8,28,10,28,12,28,234,9,28,1,29,4,29,237,8,29,11,29,12,29,238,1,30,
        1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,
        1,36,1,36,1,37,1,37,1,38,1,38,1,39,4,39,262,8,39,11,39,12,39,263,
        1,39,1,39,1,40,1,40,1,40,1,40,5,40,272,8,40,10,40,12,40,275,9,40,
        1,40,1,40,1,40,1,40,1,41,3,41,282,8,41,1,41,1,41,1,42,1,42,1,43,
        1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,5,45,297,8,45,10,45,12,45,
        300,9,45,1,45,1,45,1,273,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
        83,42,85,43,87,44,89,45,91,46,1,0,6,2,0,65,90,97,122,3,0,48,57,65,
        90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,4,0,10,10,13,13,39,39,92,
        92,1,0,34,34,308,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
        0,89,1,0,0,0,0,91,1,0,0,0,1,93,1,0,0,0,3,102,1,0,0,0,5,104,1,0,0,
        0,7,106,1,0,0,0,9,108,1,0,0,0,11,113,1,0,0,0,13,116,1,0,0,0,15,122,
        1,0,0,0,17,127,1,0,0,0,19,134,1,0,0,0,21,144,1,0,0,0,23,149,1,0,
        0,0,25,156,1,0,0,0,27,163,1,0,0,0,29,167,1,0,0,0,31,170,1,0,0,0,
        33,175,1,0,0,0,35,179,1,0,0,0,37,181,1,0,0,0,39,189,1,0,0,0,41,195,
        1,0,0,0,43,199,1,0,0,0,45,201,1,0,0,0,47,206,1,0,0,0,49,211,1,0,
        0,0,51,217,1,0,0,0,53,221,1,0,0,0,55,224,1,0,0,0,57,228,1,0,0,0,
        59,236,1,0,0,0,61,240,1,0,0,0,63,242,1,0,0,0,65,244,1,0,0,0,67,247,
        1,0,0,0,69,249,1,0,0,0,71,252,1,0,0,0,73,254,1,0,0,0,75,256,1,0,
        0,0,77,258,1,0,0,0,79,261,1,0,0,0,81,267,1,0,0,0,83,281,1,0,0,0,
        85,285,1,0,0,0,87,287,1,0,0,0,89,289,1,0,0,0,91,293,1,0,0,0,93,94,
        5,102,0,0,94,95,5,117,0,0,95,96,5,110,0,0,96,97,5,99,0,0,97,98,5,
        116,0,0,98,99,5,105,0,0,99,100,5,111,0,0,100,101,5,110,0,0,101,2,
        1,0,0,0,102,103,5,40,0,0,103,4,1,0,0,0,104,105,5,44,0,0,105,6,1,
        0,0,0,106,107,5,41,0,0,107,8,1,0,0,0,108,109,5,115,0,0,109,110,5,
        107,0,0,110,111,5,105,0,0,111,112,5,112,0,0,112,10,1,0,0,0,113,114,
        5,105,0,0,114,115,5,102,0,0,115,12,1,0,0,0,116,117,5,119,0,0,117,
        118,5,104,0,0,118,119,5,105,0,0,119,120,5,108,0,0,120,121,5,101,
        0,0,121,14,1,0,0,0,122,123,5,108,0,0,123,124,5,111,0,0,124,125,5,
        111,0,0,125,126,5,112,0,0,126,16,1,0,0,0,127,128,5,115,0,0,128,129,
        5,101,0,0,129,130,5,116,0,0,130,131,5,80,0,0,131,132,5,105,0,0,132,
        133,5,110,0,0,133,18,1,0,0,0,134,135,5,116,0,0,135,136,5,111,0,0,
        136,137,5,103,0,0,137,138,5,103,0,0,138,139,5,108,0,0,139,140,5,
        101,0,0,140,141,5,80,0,0,141,142,5,105,0,0,142,143,5,110,0,0,143,
        20,1,0,0,0,144,145,5,119,0,0,145,146,5,97,0,0,146,147,5,105,0,0,
        147,148,5,116,0,0,148,22,1,0,0,0,149,150,5,112,0,0,150,151,5,114,
        0,0,151,152,5,105,0,0,152,153,5,110,0,0,153,154,5,116,0,0,154,155,
        5,40,0,0,155,24,1,0,0,0,156,157,5,71,0,0,157,158,5,76,0,0,158,159,
        5,79,0,0,159,160,5,66,0,0,160,161,5,65,0,0,161,162,5,76,0,0,162,
        26,1,0,0,0,163,164,5,112,0,0,164,165,5,105,0,0,165,166,5,110,0,0,
        166,28,1,0,0,0,167,168,5,61,0,0,168,169,5,61,0,0,169,30,1,0,0,0,
        170,171,5,104,0,0,171,172,5,105,0,0,172,173,5,103,0,0,173,174,5,
        104,0,0,174,32,1,0,0,0,175,176,5,108,0,0,176,177,5,111,0,0,177,178,
        5,119,0,0,178,34,1,0,0,0,179,180,5,37,0,0,180,36,1,0,0,0,181,182,
        5,114,0,0,182,183,5,101,0,0,183,184,5,97,0,0,184,185,5,100,0,0,185,
        186,5,80,0,0,186,187,5,105,0,0,187,188,5,110,0,0,188,38,1,0,0,0,
        189,190,5,98,0,0,190,191,5,101,0,0,191,192,5,103,0,0,192,193,5,105,
        0,0,193,194,5,110,0,0,194,40,1,0,0,0,195,196,5,101,0,0,196,197,5,
        110,0,0,197,198,5,100,0,0,198,42,1,0,0,0,199,200,5,58,0,0,200,44,
        1,0,0,0,201,202,5,101,0,0,202,203,5,108,0,0,203,204,5,115,0,0,204,
        205,5,101,0,0,205,46,1,0,0,0,206,207,5,116,0,0,207,208,5,114,0,0,
        208,209,5,117,0,0,209,210,5,101,0,0,210,48,1,0,0,0,211,212,5,102,
        0,0,212,213,5,97,0,0,213,214,5,108,0,0,214,215,5,115,0,0,215,216,
        5,101,0,0,216,50,1,0,0,0,217,218,5,97,0,0,218,219,5,110,0,0,219,
        220,5,100,0,0,220,52,1,0,0,0,221,222,5,111,0,0,222,223,5,114,0,0,
        223,54,1,0,0,0,224,225,5,110,0,0,225,226,5,111,0,0,226,227,5,116,
        0,0,227,56,1,0,0,0,228,232,7,0,0,0,229,231,7,1,0,0,230,229,1,0,0,
        0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,58,1,0,0,0,
        234,232,1,0,0,0,235,237,7,2,0,0,236,235,1,0,0,0,237,238,1,0,0,0,
        238,236,1,0,0,0,238,239,1,0,0,0,239,60,1,0,0,0,240,241,5,61,0,0,
        241,62,1,0,0,0,242,243,5,60,0,0,243,64,1,0,0,0,244,245,5,60,0,0,
        245,246,5,61,0,0,246,66,1,0,0,0,247,248,5,62,0,0,248,68,1,0,0,0,
        249,250,5,62,0,0,250,251,5,61,0,0,251,70,1,0,0,0,252,253,5,43,0,
        0,253,72,1,0,0,0,254,255,5,45,0,0,255,74,1,0,0,0,256,257,5,42,0,
        0,257,76,1,0,0,0,258,259,5,47,0,0,259,78,1,0,0,0,260,262,7,3,0,0,
        261,260,1,0,0,0,262,263,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,
        264,265,1,0,0,0,265,266,6,39,0,0,266,80,1,0,0,0,267,268,5,47,0,0,
        268,269,5,47,0,0,269,273,1,0,0,0,270,272,9,0,0,0,271,270,1,0,0,0,
        272,275,1,0,0,0,273,274,1,0,0,0,273,271,1,0,0,0,274,276,1,0,0,0,
        275,273,1,0,0,0,276,277,5,10,0,0,277,278,1,0,0,0,278,279,6,40,0,
        0,279,82,1,0,0,0,280,282,5,13,0,0,281,280,1,0,0,0,281,282,1,0,0,
        0,282,283,1,0,0,0,283,284,5,10,0,0,284,84,1,0,0,0,285,286,5,9,0,
        0,286,86,1,0,0,0,287,288,8,4,0,0,288,88,1,0,0,0,289,290,5,102,0,
        0,290,291,5,111,0,0,291,292,5,114,0,0,292,90,1,0,0,0,293,294,7,5,
        0,0,294,298,3,87,43,0,295,297,3,87,43,0,296,295,1,0,0,0,297,300,
        1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,298,
        1,0,0,0,301,302,7,5,0,0,302,92,1,0,0,0,8,0,230,232,238,263,273,281,
        298,1,6,0,0
    ]

class ArduScriptLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    BEGIN = 20
    END = 21
    COLON = 22
    ELSE = 23
    TRUE = 24
    FALSE = 25
    AND = 26
    OR = 27
    NOT = 28
    ID = 29
    NUM = 30
    EQ = 31
    LT = 32
    LE = 33
    GT = 34
    GE = 35
    PLUS = 36
    MINUS = 37
    MULT = 38
    DIV = 39
    WS = 40
    SL_COMMENT = 41
    NEWLINE = 42
    TAB = 43
    StringLiteral = 44
    FOR = 45
    STRING = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'function'", "'('", "','", "')'", "'skip'", "'if'", "'while'", 
            "'loop'", "'setPin'", "'togglePin'", "'wait'", "'print('", "'GLOBAL'", 
            "'pin'", "'=='", "'high'", "'low'", "'%'", "'readPin'", "'begin'", 
            "'end'", "':'", "'else'", "'true'", "'false'", "'and'", "'or'", 
            "'not'", "'='", "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", 
            "'*'", "'/'", "'\\t'", "'for'" ]

    symbolicNames = [ "<INVALID>",
            "BEGIN", "END", "COLON", "ELSE", "TRUE", "FALSE", "AND", "OR", 
            "NOT", "ID", "NUM", "EQ", "LT", "LE", "GT", "GE", "PLUS", "MINUS", 
            "MULT", "DIV", "WS", "SL_COMMENT", "NEWLINE", "TAB", "StringLiteral", 
            "FOR", "STRING" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "BEGIN", 
                  "END", "COLON", "ELSE", "TRUE", "FALSE", "AND", "OR", 
                  "NOT", "ID", "NUM", "EQ", "LT", "LE", "GT", "GE", "PLUS", 
                  "MINUS", "MULT", "DIV", "WS", "SL_COMMENT", "NEWLINE", 
                  "TAB", "StringLiteral", "FOR", "STRING" ]

    grammarFileName = "ArduScript.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


